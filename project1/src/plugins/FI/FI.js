/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Wed Oct 19 2016 21:34:43 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'q'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    Q) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of MiniProject2.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin MiniProject2.
     * @constructor
     */
    var FI = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    FI.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    FI.prototype = Object.create(PluginBase.prototype);
    FI.prototype.constructor = FI;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    FI.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject,
            artifact;

        FI.prototype.loadNodeMap = function (node) {
            var self = this;
            return self.core.loadSubTree(node)
                .then(function (nodeArr) {
                    var nodes = {},
                        i;
                    for (i = 0; i < nodeArr.length; i += 1) {
                        nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
                    }

                    return nodes;
                });
        };
        self.metaNodeInfo = [];



        self.loadNodeMap(self.rootNode);
        var self = this,
            nodeObject,
            jsonModel,
            obj=[],
            artifact;


        nodeObject = self.activeNode;

        self.loadNodeMap(nodeObject)
            .then(function (nodes) {
                self._nodes = nodes;
				obj.push(self.killProcess(self.rootNode,nodes));
                //self.logger.info(JSON.stringify(self.metaNodeInfo, null, 4));
                //self.logger.info(JSON.stringify(obj, null, 4));

                return self.generateArtifact(self.metaNodeInfo, obj);
            })
            .then(function (artifactHash) {
                self.result.addArtifact(artifactHash);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                // Result success is false at invocation.
                self.logger.error(err.stack);
                callback(err, self.result);
            });

    };
    FI.prototype.killProcess = function (root, nodes) {
        var self = this,
            childrenPaths,
            childNode,
            i,
            isMetaNode,
            metaNode,
            metaPath,
            myPath,
            name,
			data1,
			res='',
			tree={},

        childrenPaths = self.core.getChildrenPaths(root);


        // detecting if it is a meta node
        name = self.core.getAttribute(root, 'name');
        metaNode = self.getMetaType(root);
        metaPath = self.core.getPath(metaNode);
        myPath = self.core.getPath(root);


        isMetaNode = (metaPath === myPath);
        self.logger.info(name,metaPath,myPath, "isMeta", (metaPath === myPath));


        var metaNode = self.core.getBaseType(root),
        nodeName = self.core.getAttribute(root, 'name'),
        metaName = metaNode ? self.core.getAttribute(metaNode, 'name') : ':LibraryRoot:';
		var ProcessName=""

        if(metaName=='Fault'){
            ProcessName=self.core.getAttribute(root, 'ProcessName');
			require(['child_process'], function (child_process) {
			var childProcess = require('child_process')
			
			
            var spawn = childProcess.spawn;
			var process = spawn('C:\\Python34\\python.exe',["C:\\Users\\Travisbrummett\\Documents\\GitHub\\MIC-WebGME\\project1\\src\\plugins\\FI\\faultInjector.py", ProcessName]);
			
			process.stdout.on('data', (data) => {
			console.log(`stdout: ${data}`);
			res+=data.toString();
			});

			process.stderr.on('data', (data) => {
			console.log(`stderr: ${data}`);
			});

			process.on('close', (code) => {
			console.log(`child process exited with code ${code}`);
			res=(function(res) { console.log(res) }(res));
			
			
			});
            });
			var newExecutionNode = self.core.createNode({parent:self.core.getParent(root),base: self.META.Execution});
			var newResultNode = self.core.createNode({parent:newExecutionNode,base: self.META.Results});
			self.core.setAttribute(newExecutionNode,'Name',ProcessName);
			self.core.setAttribute(newResultNode,'Name',ProcessName);
			self.core.setAttribute(newResultNode,'Result',true);
			self.core.setPointer(newResultNode,'Origin',self.core.getParent(root));
			self.save('save successful')
				.then(function(result){

			})
                .catch(function(error){
            });
			
			};
			
        
		
			
		var children= {};
        for (i = 0; i < childrenPaths.length; i++) {
            childNode = nodes[childrenPaths[i]];

            var Path = self.core.getRelid(childNode);



            children[Path] =  self.killProcess(childNode, nodes);
			}
			
		tree = ({
                name: name, metaType: metaName, ProcessName: ProcessName,data: res, children: children
            });



        
		return tree
    };

    FI.prototype.generateArtifact = function (jsonModel, obj) {
        var self = this,
            deferred = Q.defer(),
            language,
            artifact,
            filesToAdd = {},
            codeFileName,
            batchFileName;

        artifact = self.blobClient.createArtifact('project-data');
        filesToAdd['FI.json'] = JSON.stringify(obj, null, 4);



        artifact.addFiles(filesToAdd, function (err) {
            if (err) {
                deferred.reject(new Error(err));
                return;
            }
            self.blobClient.saveAllArtifacts(function (err, hashes) {
                if (err) {
                    deferred.reject(new Error(err));
                    return;
                }

                deferred.resolve(hashes[0]);
            });
        });
        return deferred.promise;
    };


    return FI;
	
});
